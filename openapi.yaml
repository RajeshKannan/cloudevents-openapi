openapi: 3.0.1
info:
  title: EventStore
  version: v1
  license:
    name: Apache
  contact:
    name: Rajesh Kannan Poraiyan
    email: rajeshporaiyan@gmail.com
paths:
  /api/events:
    post:
      tags:
        - Events
      summary: Appends the new event
      description: "Sample request:\r\n    \r\n    POST /api/events\r\n    {\r\n        \"id\":123,\r\n        \"schemaversion\" : \"1.0\",\r\n        \"source\": \"urn:my.platform\",\r\n        \"subject\": \"123.person\",\r\n        \"type\": \"myplatform.contact.created\",\r\n        \"data\": \"\\\"{ firstName: \\\"rajesh\\\" }\\\"\",\r\n        \"time\": \"2020-12-02T14:52:27.966-05:00\"\r\n    }"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloudEvent'
          application/cloudevents+json:
            schema:
              $ref: '#/components/schemas/CloudEvent'
          text/json:
            schema:
              $ref: '#/components/schemas/CloudEvent'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CloudEvent'
      responses:
        '201':
          description: If the event is appended
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CloudEvent'
            application/json:
              schema:
                $ref: '#/components/schemas/CloudEvent'
            text/json:
              schema:
                $ref: '#/components/schemas/CloudEvent'
        '400':
          description: For bad input
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/events/batch:
    post:
      tags:
        - Events
      summary: Allows multiple events in a single request
      requestBody:
        content:
          application/cloudevents-batch+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CloudEvent'
              nullable: true
      responses:
        '201':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
components:
  schemas:
    CloudEvent:
      required:
        - id
        - source
        - specversion
        - type
      type: object
      properties:
        specversion:
          type: string
          description: "CloudEvents 'specversion' attribute. The version of the CloudEvents\r\nspecification which the event uses. This enables the interpretation of the context."
        id:
          type: string
          description: " Identifies the event. Producers MUST ensure that source + id is unique for each distinct event. If a duplicate event is re-sent (e.g. due to a network error) it MAY have the same id. Consumers MAY assume that Events with identical source and id are duplicates.\r\nExamples:\r\n An event counter maintained by the producer\r\n A UUID\r\nConstraints:\r\n REQUIRED\r\n MUST be a non-empty string\r\n MUST be unique within the scope of the producer"
        source:
          type: string
          description: "Identifies the context in which an event happened. Often this will include information such as the type of the event source, the organization publishing the event or the process that produced the event. The exact syntax and semantics behind the data encoded in the URI is defined by the event producer.\r\n            \r\nProducers MUST ensure that source + id is unique for each distinct event.\r\n            \r\nAn application MAY assign a unique source to each distinct producer, which makes it easy to produce unique IDs since no other producer will have the same source. The application MAY use UUIDs, URNs, DNS authorities or an application-specific scheme to create unique source identifiers.\r\n            \r\nA source MAY include more than one producer. In that case the producers MUST collaborate to ensure that source + id is unique for each distinct event.\r\n            \r\nConstraints:\r\n            \r\n    REQUIRED\r\n    MUST be a non-empty URI-reference\r\n    An absolute URI is RECOMMENDED\r\n            \r\nExamples\r\n            \r\n    Internet-wide unique URI with a DNS authority.\r\n        https://github.com/cloudevents\r\n        mailto:cncf-wg-serverless @lists.cncf.io\r\n    Universally-unique URN with a UUID:\r\n        urn:uuid:6e8bc430-9c3a-11d9-9669-0800200c9a66\r\n    Application-specific identifiers\r\n        /cloudevents/spec/pull/123\r\n        /sensors/tn-1234567/alerts\r\n        1-555-123-4567"
          format: uri
        subject:
          type: string
          description: "CloudEvents 'subject' attribute. This describes the subject of the event in the context\r\nof the event producer (identified by source). In publish-subscribe scenarios, a subscriber\r\nwill typically subscribe to events emitted by a source, but the source identifier alone\r\nmight not be sufficient as a qualifier for any specific event if the source context has\r\ninternal sub-structure."
          nullable: true
        type:
          type: string
          description: "CloudEvents 'type' attribute. Type of occurrence which has happened.\r\nOften this attribute is used for routing, observability, policy enforcement, etc."
        time:
          type: string
          description: CloudEvents 'time' attribute. Timestamp of when the event happened.
          format: date-time
          nullable: true
        datacontenttype:
          type: string
          description: "Type: String per RFC 2046\r\nDescription: Content type of data value.This attribute enables data to carry any type of content, whereby format and encoding might differ from that of the chosen event format.For example, an event rendered using the JSON envelope format might carry an XML payload in data, and the consumer is informed by this attribute being set to \"application/xml\". The rules for how data content is rendered for different datacontenttype values are defined in the event format specifications; for example, the JSON event format defines the relationship in section 3.1.\r\n            \r\nFor some binary mode protocol bindings, this field is directly mapped to the respective protocol's content-type metadata property. Normative rules for the binary mode and the content-type metadata mapping can be found in the respective protocol\r\n            \r\nIn some event formats the datacontenttype attribute MAY be omitted.For example, if a JSON format event has no datacontenttype attribute, then it is implied that the data is a JSON value conforming to the \"application/json\" media type. In other words: a JSON-format event with no datacontenttype is exactly equivalent to one with datacontenttype = \"application/json\".\r\n     \r\n            \r\nWhen translating an event message with no datacontenttype attribute to a different format or protocol binding, the target datacontenttype SHOULD be set explicitly to the implied datacontenttype of the source.\r\n            \r\n            \r\nConstraints:\r\n            \r\n    OPTIONAL\r\n    If present, MUST adhere to the format specified in RFC 2046\r\n            \r\nFor Media Type examples see IANA Media Types"
          nullable: true
        dataschema:
          type: string
          description: "Type: URI\r\nDescription: Identifies the schema that data adheres to.Incompatible changes to the schema SHOULD be reflected by a different URI.See Versioning of Attributes in the Primer for more information.\r\nConstraints:\r\n    OPTIONAL\r\n    If present, MUST be a non-empty URI"
          format: uri
          nullable: true
        data:
          type: object
          additionalProperties: false
          description: "CloudEvent 'data' content.  The event payload. The payload depends on the type\r\nand the 'schemaurl'. It is encoded into a media format which is specified by the\r\n'contenttype' attribute (e.g. application/json)."
          nullable: true
      additionalProperties: false
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
      additionalProperties:
        type: object
        additionalProperties: false
